
# """Login Owneruser/Enduser serializer"""
# class LoginSerializer(serializers.ModelSerializer):
#     email= serializers.EmailField(required=True)
#     password = serializers.CharField(required=True)

#     class Meta:
#         model = CustomUser
#         fields = ('email','password',)



# from django.views.generic.base import TemplateView

# class HomePageView(TemplateView):
#     template_name = 'payment.html'




"""Payment Method For Enduser"""
class PaymentMethod(APIView):
    permission_classes = (IsAuthenticated,)

    def get(self, request, format=None):  
        user=request.user
        user=CustomUser.objects.filter(email=request.user)
        serializer = PaymentMethodSerializer()
        return Response(serializer.data)

    def post(self,request):
        user=CustomUser.objects.get(email=request.user)
        dec_data=request.data

        serializer = PaymentMethodSerializer(data=dec_data)

        if serializer.is_valid(raise_exception=True):
            card_number= request.data.get('card_number')
            exp_month= request.data.get('exp_month')
            exp_year= request.data.get('exp_year')
            cvc= request.data.get('cvc')
            stripe_customers=stripe.Customer.list(email=user.email).data
           
            if len(stripe_customers)==0:
                #1. create a payment customer
                stripe_customer = stripe.Customer.create(
                                    email=user.email,
                                    name=user.name+user.last_name,

                                    )
            else:
                stripe_customer=stripe_customers[0]

            stripe_payments=stripe.PaymentMethod.list(customer=stripe_customer,type="card").data
        
            if len(stripe_payments)==0:
                payment_method = stripe.PaymentMethod.create(
                    type="card",
                    card={
                        "number": card_number,
                        "exp_month": exp_month,
                        "exp_year": exp_year,
                        "cvc": cvc,
                        "country": "INDIA",
                        },
                    billing_details={
                            "email": user.email,
                            "name": user.name,
                        },
                    )

                stripe_payment=stripe.PaymentMethod.attach(
                        payment_method,
                        customer=stripe_customer,
                        )
            
            else:
                stripe_payment=stripe_payments[0]
        
            return Response(status=status.HTTP_200_OK, data=({"payment_method":stripe_payment}))

        else:
            return Response(fail("Invalid"),status=BAD_REQUEST)
"""ADMIN MANAGER Dishes/Cuisine GET,UPDATE,DELETE"""
class ADMIN_Dishes_CuisineVIEW(APIView):
    permission_classes = (IsAuthenticated,)

    def get(self, request, format=None):
        
        searched=request.data["searched"]
        if searched=="dishes":
            email=request.data["email"]
            dishes= dishe.objects.filter(Q(user__email=email))
            print(dishes)
            serializer = DishesSerializer(dishes,many=True)
            return Response(serializer.data) 
        elif searched=="cuisine" :
            email=request.data["email"]
            cuisines= Cuisine.objects.filter(Q(user__email=email))
            print(cuisines)
            serializer = CuisineSerializer(cuisines,many=True)
            return Response(serializer.data) 

    def patch(self, request, format=None):
        searched=request.data["searched"]
        
        if searched=="dishes":
            data = request.data
            email=request.data["email"]
            d_id=request.data['id']
            dishes= dishe.objects.filter(Q(user__email=email) & Q(id=d_id))
            if dishes:
                user1 = dishe.objects.filter(user__email=email).get(id=d_id)
                print(user1)
                serializer = DishesSerializer(user1,data=data,context={'user': email },partial=True)
                if serializer.is_valid():
                    serializer.save()
                    code = status.HTTP_200_OK
                    return Response(success(code, "Dishes details updated",serializer.data),code)
                else:
                    code = status.HTTP_404_NOT_FOUND
                    return Response(unsuccess(code,serializer.errors),code)
            else:
                return Response("Dishes not found")

        elif searched=="cuisine":
            email=request.data["email"]
            u_id=request.data['id']
            data=request.data
            cuisines= Cuisine.objects.filter(Q(user__email=email)& Q(id=u_id))

            if cuisines:
                user1=Cuisine.objects.get(id=u_id)
                serializer = CuisineSerializer(user1,data=data,context={'user':request.user},partial=True)
                if serializer.is_valid():
                    serializer.save()
                    code = status.HTTP_200_OK
                    return Response(success(code, "Cuisine details updated",serializer.data),code)
            
                else:
                    code = status.HTTP_404_NOT_FOUND
                    return Response(unsuccess(code,serializer.errors),code)
            else:
                return Response("cuisine not found")

    def delete(self, request, format=None):
        try:
            searched=request.data["searched"]

            if searched=="dishes":
                email=request.data["email"]
                d_id=request.data['id']
                dishes= dishe.objects.filter(Q(user__email=email) & Q(id=d_id))
                dishes.delete()
                code=status.HTTP_204_NO_CONTENT
                return Response(success(code,"Data deleted successfully!","null"),code)

            elif searched=="cuisine":
                email=request.data["email"]
                u_id=request.data['id']
                data=request.data
                cuisines= Cuisine.objects.filter(Q(user__email=email)& Q(id=u_id))
                cuisines.delete()
                code=status.HTTP_204_NO_CONTENT
                return Response(success(code,"Data deleted successfully!","null"),code)

        except:
            code = status.HTTP_404_NOT_FOUND
            return Response(unsuccess(code,"null"),code)

        dishes= dishe.objects.all().order_by('-count_sold')
      